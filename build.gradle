import groovy.json.JsonSlurper

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:_")
        classpath("org.openapitools:openapi-generator-gradle-plugin:_")
        classpath("org.jetbrains.kotlin:kotlin-serialization:_")
        classpath("com.github.johnrengelman:shadow:_")
        classpath("io.codearte.nexus-staging:io.codearte.nexus-staging.gradle.plugin:_")
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'maven-publish'
    id 'signing'
    id "io.codearte.nexus-staging"
    id 'java-gradle-plugin'
    id 'com.github.johnrengelman.shadow'
    id 'com.gradle.plugin-publish'
    id 'com.github.breadmoirai.github-release'
}

group 'com.talk2duck'
version new JsonSlurper().parse(new File('version.json')).project.version

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        allWarningsAsErrors = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        allWarningsAsErrors = true
    }
}

repositories {
    mavenCentral()
}

configurations {
    packageShadowJar
}

dependencies {
    packageShadowJar "com.amazonaws:aws-java-sdk-s3:_"

    implementation localGroovy()
    implementation gradleApi()
    implementation "com.amazonaws:aws-java-sdk-s3:_"

    testImplementation Testing.junit.jupiter.api
    testImplementation Testing.junit.jupiter.engine
    testImplementation Testing.junit.jupiter.params
    testImplementation "com.natpryce:hamkrest:_"
    testImplementation "io.findify:s3mock_2.12:_"
}

configurations.packageShadowJar.dependencies.remove dependencies.gradleApi()

shadowJar {
    configurations = [project.configurations.packageShadowJar]
    archiveClassifier.set('')
    enableRelocation true
    relocationPrefix "com.talk2duck.gradle.buildcache.shadow"
    mergeServiceFiles()
    exclude 'META-INF/versions/'
    exclude 'META-INF/maven/'
    exclude 'META-INF/*.kotlin_module'
}

test {
    useJUnitPlatform()
}

gradlePlugin {
    plugins {
        s3BuildCache {
            id = 'com.talk2duck.gradle-s3-build-cache'
            implementationClass = 'com.talk2duck.gradle.buildcache.S3BuildCachePlugin'
            displayName = 'Gradle S3 Build Cache Plugin'
            description = 'Gradle build cache plugin that uses AWS S3 to store build artifacts'
            website = 'https://github.com/talk2duck/gradle-s3-build-cache'
            vcsUrl = 'https://github.com/talk2duck/gradle-s3-build-cache'
        }
    }
}

jar {
    manifest {
        attributes(
                'gradle_buildcache_version': archiveVersion
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}


signing {
    def signingKey = System.getenv('SIGNING_KEY')
    def signingPassword = System.getenv('SIGNING_PASSWORD')

    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

def nexusUsername = System.getenv('NEXUS_USERNAME') ?: 'notset'
def nexusPassword = System.getenv('NEXUS_PASSWORD') ?: 'notset'

publishing {
    repositories {
        maven {
            name 'SonatypeStaging'
            url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username nexusUsername
                password nexusPassword
            }
        }

        maven {
            name 'SonatypeSnapshot'
            url 'https://s01.oss.sonatype.org/service/local/snapshots/deploy/maven2/'
            credentials {
                username nexusUsername
                password nexusPassword
            }
        }
    }

    publications {
        mavenJava(MavenPublication) { publication ->
            artifactId = project.name

            project.shadow.component(publication)

            pom {
                name = project.name
                description = 'Gradle build cache plugin that uses AWS S3 to store build artifacts'
                url = 'https://github.com/talk2duck/gradle-s3-build-cache'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        name = 'Talk2Duck'
                        email = 'support@talk2duck.com'
                    }
                }

                scm {
                    connection = 'scm:git:git@github.com:talk2duck/gradle-s3-build-cache.git'
                    developerConnection = 'scm:git:git@github.com:talk2duck/gradle-s3-build-cache.git'
                    url = 'git@github.com:talk2duck/gradle-s3-build-cache.git'
                }
            }

            artifact sourcesJar
            artifact javadocJar
        }
    }
}

nexusStaging {
    serverUrl = 'https://s01.oss.sonatype.org/service/local'
    username = nexusUsername
    password = nexusPassword
}

githubRelease {
    token = System.getenv('GITHUB_TOKEN').toString()
    owner = 'talk2duck'
    repo = project.name
    tagName = project.version.toString()
    targetCommitish 'main'
    releaseName = project.version.toString()
    body.set(provider { "./scripts/release-notes.sh ${project.version}".execute().text.trim() })
    draft false
    prerelease false
    overwrite false
    dryRun false
}
